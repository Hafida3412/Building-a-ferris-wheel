.wheel {
    border: 2px solid black;
    border-radius: 50%;
    margin-left: 50px;
    position: absolute;
    height: 55vw;
    width: 55vw;
    max-width: 500px;
    max-height: 500px;
    animation-name:wheel; /*The animation-name property is used to link a @keyframes rule to a CSS selector. 
    The value of this property should match the name of the @keyframes rule. Give your .wheel selector an 
    animation-name property set to wheel.*/

    animation-duration:10s; /*The animation-duration property is used to set how long the animation should 
    sequence to complete. The time should be specified in either seconds (s) or milliseconds (ms).*/

    animation-iteration-count: infinite; /*sets how many times your animation should repeat. This can be 
    set to a number, or to infinite to indefinitely repeat the animation*/

    animation-timing-function: linear; /*sets how the animation should progress over time. There are a few 
    different values for this property, but you want the Ferris wheel animation to run at the same rate from 
    start to finish.*/ 
  }

  .line {
    background-color: black;
    width: 50%;
    height: 2px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform-origin: 0% 0%; /*The transform-origin property is used to set the point around which 
    a CSS transformation is applied. For example, when performing a rotate (which you will do later
     in this project), the transform-origin determines around which point the element is rotated.
    The property of 0% 0%  will offset the origin point by 0% from the left and 0% from the top, 
    setting it to the top left corner of the element.*/
  }

  .line:nth-of-type(2) { /*---target the second line element.*/
    transform: rotate(60deg); /*--The transform property allows you to
    manipulate the shape of an element. In this case, using the rotate(60deg) value will rotate the
    element around its transform-origin point by 60 degrees clockwise.*/
  }

  .line:nth-of-type(3) {
    transform: rotate(120deg);
  }
  .line:nth-of-type(4) {
    transform: rotate(180deg);
  }
  .line:nth-of-type(5) {
    transform: rotate(240deg);
  }
  .line:nth-of-type(6) {
    transform: rotate(300deg);
  }
  
  .cabin {
    background-color: red;
    width: 20%;
    height: 20%;
    position: absolute;
    border: 2px solid;
    transform-origin: 50% 0%;  /*---This will set the origin point to be offset 50% from the left and 0% 
    from the top, placing it in the middle of the top edge of the element.*/

    animation: cabins 10s ease-in-out infinite; /*--Set the animation property of the .cabin rule to cabins 10s
    linear infinite. This will set the animation-name, animation-duration, animation-timing-function, and
    animation-iteration-count properties in that order.*/
    
    /*We replace "linear" by "ease-in-out".To make your cabin animation seem more like a natural swinging motion,
     you can use the ease-in-out timing function. This setting will tell the animation to start and end at a slower 
     pace, but move more quickly in the middle of the cycle.*/
  }

  .cabin:nth-of-type(1) {
    right: -8.5%;
    top: 50%;
  }
  .cabin:nth-of-type(2) {
    right: 17%;
    top: 93.5%;
  }
  .cabin:nth-of-type(3) {
    right: 67%;
    top: 93.5%;
  }
  .cabin:nth-of-type(4) {
    left: -8.5%;
    top: 50%;
  }
  .cabin:nth-of-type(5) {
    left: 17%;
    top: 7%;
  }
  .cabin:nth-of-type(6) {
    right: 17%;
    top: 7%;
  }

  @keyframes wheel {   /*----The @keyframes at-rule is used to define the flow of a CSS animation. 
                        Within the @keyframes rule, you can create selectors for specific points in the animation sequence,
                        such as 0% or 25%, or use from and to to define the start and end of the sequence.*/
      0% {
        transform: rotate(0deg); /*This will start the animation with no rotation.*/
      }

      100%{
        transform: rotate(360deg); /*The animation will now complete a full rotation.*/
      }
  }

  @keyframes cabins {
    0% {
      transform: rotate(0deg);
      }

    25%{
        background-color:yellow;
      }

    50%{
        background-color: purple;
      }

    75%{
        background-color:yellow;
      }

    100% {
      transform: rotate(-360deg);
    }
  }